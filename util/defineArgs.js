'use strict';
const yargs = require('yargs');
const chalk = require('chalk');
//client-side hooks
const hooks = [
    {
        name: 'pre-commit',
        abt: 'Hook that runs at the beginning of a commit, even before a message is added'
    },
    {
        name: 'prepare-commit-msg',
        abt: 'Hook that runs before the message editor is fired up, but after default message created'
    },
    {
        name: 'commit-msg',
        abt: 'Hook that runs after message is populated and saved to temp file'
    },
    {
        name: 'post-commit',
        abt: 'Hook that runs at the end of a commit after it has finished'
    }
];

var argv = yargs
    .usage('genhook (<hook-name>|installer) [opts]')
    .alias('v', 'version')
    .version(() => require('../package.json').version)
    .describe('v', 'Show the current version of genhook-cli')
    .showHelpOnFail(false, 'Specify --help for available options')
    .fail(msg => {
        var hasCmd = process.argv.length > 2;
        if (!hasCmd) {
            console.error(chalk.red('Missing Command: '),
                `please use ${chalk.bold.cyan('genhook --help')} to see help and usage info.`);
        } else {
            console.error(msg);
        }
        process.exit(1);
    })
    .wrap(yargs.terminalWidth())
    .command('installer',
        'Generate a gulp task that will install all of the git hooks ' +
        'that have been generated and saved into your repository',
        installerYargs => {
            installerYargs
                .showHelpOnFail(false, 'Specify --help for available options')
                .wrap(yargs.terminalWidth())
                .options({
                'd': {
                    alias: 'dest',
                    describe: 'Relative Destination path for the generated installer task file',
                    type: 'string',
                    demand: true
                },
                'h': {
                    alias: 'hooks',
                    describe: 'Relative Path to directory holding git hook files generated by GenHook',
                    type: 'string',
                    demand: true
                },
                'n': {
                    alias: 'name',
                    describe: 'Name to give the generated file',
                    type: 'string',
                    default: 'installGitHooks.js'
                },
                'r': {
                    alias: 'taskRunnerRoot',
                    describe: 'Relative Path to your task runner sourcefile - i.e. path to gulpfile.js - ' +
                    'defaults to CWD from where genhook command is ran.',
                    demand: false,
                    default: './'
                },
                't': {
                    alias: 'taskName',
                    describe: 'What you want the task to be named',
                    demand: false,
                    type: 'string',
                    default: 'install-git-hooks'
                }
            })
            .epilog('* Generated installer gulp task will require gulp-chmod and gulp-rename modules')
            .example('genhook installer -d ../gulp-tasks/ -h ../../git-hooks/ ' +
                '-n git-hook-installer.js -t installGitHooks')
            .help('help');
        });

hooks.forEach(h => argv.command(h.name, h.abt));

argv.options({
    'd': {
        alias: 'dest',
        describe: 'Relative destination path for the generated hooks to be put into if saving to ' +
            'your repository for team use',
        demand: false
    },
    'r': {
        alias: 'taskRunnerRoot',
        describe: 'Relative Path to your task runner sourcefile - i.e. path to gulpfile.js - ' +
            'defaults to CWD from where genhook command is ran.',
        demand: false,
        default: './'
    },
    't': {
        alias: 'tasks',
        describe: 'What task(s) to call from the git hook',
        demand: true,
        type: 'array'
    },
    'w': {
        alias: 'windows',
        describe: 'Include bash script to support using windows',
        default: false,
        type: 'boolean'
    }
});

argv.example('genhook pre-commit -d ../../git-hooks/ -r ../src/ -t pc-lint pc-test -w false');

argv.completion('completion', (cmdTxt) => {
    return hooks
        .map(h => h.name)
        .concat('installer')
        .filter(cmd => cmd.toLowerCase().indexOf(cmdTxt.toLowerCase()) > -1);
});

argv.help('help');

exports.yargs = argv;
exports.supportedHooks = hooks.map(h => h.name);
